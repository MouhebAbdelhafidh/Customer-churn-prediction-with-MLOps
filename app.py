from fastapi import FastAPI
from pydantic import BaseModel
import joblib
import numpy as np
from typing import List  # âœ… Import de List pour la compatibilitÃ© avec Python <3.9
from pipeline import prepare_data, train_model, save_model 

# Charger le modÃ¨le entraÃ®nÃ©
model = joblib.load("model.joblib")

# Initialiser l'application FastAPI
app = FastAPI()

# DÃ©finir le format des donnÃ©es d'entrÃ©e
class InputData(BaseModel):
    features: List[float]  # âœ… Utilisation de List[float] au lieu de list[float]

# DÃ©finir la route de prÃ©diction
@app.post("/predict")
def predict(data: InputData):
    try:
        # Convertir les donnÃ©es d'entrÃ©e en tableau NumPy
        input_array = np.array(data.features).reshape(1, -1)
        
        # Faire la prÃ©diction
        prediction = model.predict(input_array)
        
        # Retourner le rÃ©sultat
        return {"Customer will retain" if prediction.tolist()==0 else "Customer will churn"}
    
    except Exception as e:
        return {"error": str(e)}

# ðŸ“Œ Endpoint pour le rÃ©entraÃ®nement du modÃ¨le
@app.post("/retrain")
def retrain():
    try:
        # ðŸŽ¯ 1. Recharger les donnÃ©es
        x_train, x_test, y_train, y_test = prepare_data()

        # ðŸŽ¯ 2. DÃ©but d'une nouvelle expÃ©rience MLflow
        #mlflow.set_experiment("Model Retraining")

        #with mlflow.start_run():
            # ðŸŽ¯ 3. RÃ©entraÃ®ner le modÃ¨le
        new_model = train_model(x_train, y_train)

            # ðŸŽ¯ 4. Sauvegarder le modÃ¨le mis Ã  jour
        save_model(new_model)

            # ðŸŽ¯ 5. Enregistrer dans MLflow
            #mlflow.sklearn.log_model(new_model, "updated_model")
            #mlflow.log_param("retrain", "True")

            # ðŸŽ¯ 6. Recharger le modÃ¨le en mÃ©moire
        global model
        model = new_model

        return {"message": "Model retrained successfully."}

    except Exception as e:
        return {"error": str(e)}
# Point d'entrÃ©e principal pour exÃ©cuter l'API avec Uvicorn
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
